{"version":3,"file":"static/js/background.js","mappings":"yBAAO,IAAKA,EASZ,SAASC,EAAaC,EAAgBC,GAClC,IAAIC,EAAS,SAACC,EAAsCC,GAAoC,OAAKD,EAAEE,MAAMC,cAAcF,EAAEC,MAAM,EAC3H,OAAQJ,GACJ,KAAKH,EAAUS,MACX,MACJ,KAAKT,EAAUU,UACXN,EAAS,SAACC,EAAsCC,GAAoC,OAAKD,EAAEM,UAAaL,EAAEK,UAAa,EAAG,CAAC,EAC3H,MACJ,KAAKX,EAAUY,aACXR,EAAS,SAACC,EAAsCC,GAAoC,OAAKD,EAAEQ,kBAAqBP,EAAEO,kBAAqB,EAAI,CAAC,EAIpJC,OAAOC,UAAUC,YAAYd,GAAQ,SAACe,GAClCA,EAASC,KAAKd,GACda,EAASE,SAAQ,SAACC,EAASC,GAAK,OAAKD,EAAQC,MAAQA,CAAK,IAC1DJ,EAASE,SAAQ,YAAoB,IAAjBG,EAAE,EAAFA,GAAID,EAAK,EAALA,MACpBP,OAAOC,UAAUQ,KAAKD,EAAI,CACtBE,SAAUtB,EACVmB,MAAOA,GAEf,GACJ,GACJ,EA9BC,SAFWrB,GAAAA,EAAAA,EAAS,iBAATA,EAAAA,EAAS,yBAATA,EAAAA,EAAS,+BAEpB,CAFWA,IAAAA,EAAS,KCErBc,OAAOC,UAAUU,UAAUC,aAAY,SAACJ,EAAYK,GDgC7C,IAAuBzB,EAAgB0B,EAAhB1B,EC/BZyB,EAASH,SD+BmBI,EC/BR,CAACC,WAAW,EAAM1B,UAAWH,EAAUS,ODgCzER,EAAaC,EAAQ0B,EAAKzB,WACtByB,EAAKC,WACLf,OAAOC,UAAUC,YAAYd,GAAQ,SAACe,GACX,GAAnBA,EAASa,QACbb,EAASE,SAAQ,SAACY,GAAK,OAAK9B,EAAa8B,EAAMT,GAAIM,EAAKzB,UAAU,GACtE,GCpCR,G","sources":["sort/Sort.tsx","background.ts"],"sourcesContent":["export enum Attribute {\n    Title, DateAdded, DateModified\n}\n\nexport interface SortOptions {\n    recursive: boolean;\n    attribute: Attribute;\n}\n\nfunction sortChildren(parent: string, attribute: Attribute) {\n    let sortFn = (a: chrome.bookmarks.BookmarkTreeNode, b: chrome.bookmarks.BookmarkTreeNode) => a.title.localeCompare(b.title)\n    switch (attribute) {\n        case Attribute.Title:\n            break;\n        case Attribute.DateAdded:\n            sortFn = (a: chrome.bookmarks.BookmarkTreeNode, b: chrome.bookmarks.BookmarkTreeNode) => a.dateAdded! < b.dateAdded! ? 1: 0\n            break;\n        case Attribute.DateModified:\n            sortFn = (a: chrome.bookmarks.BookmarkTreeNode, b: chrome.bookmarks.BookmarkTreeNode) => a.dateGroupModified! < b.dateGroupModified! ? 1 : 0\n            break;\n    }\n\n    chrome.bookmarks.getChildren(parent, (children: chrome.bookmarks.BookmarkTreeNode[]) => {\n        children.sort(sortFn)\n        children.forEach((sibling, index) => sibling.index = index)\n        children.forEach(({ id, index }) => {\n            chrome.bookmarks.move(id, {\n                parentId: parent,\n                index: index,\n            })\n        })\n    })\n}\n\nexport function sortBookmarks(parent: string, opts: SortOptions) {\n    sortChildren(parent, opts.attribute)\n    if (opts.recursive) {\n        chrome.bookmarks.getChildren(parent, (children: chrome.bookmarks.BookmarkTreeNode[]) => {\n            if (children.length == 0) return\n            children.forEach((child) => sortChildren(child.id, opts.attribute))\n        })\n    }\n}\n","import { sortBookmarks, Attribute } from './sort/Sort'\n\nchrome.bookmarks.onCreated.addListener((id: string, bookmark: chrome.bookmarks.BookmarkTreeNode) => {\n    sortBookmarks(bookmark.parentId!, {recursive: true, attribute: Attribute.Title})\n})\n"],"names":["Attribute","sortChildren","parent","attribute","sortFn","a","b","title","localeCompare","Title","DateAdded","dateAdded","DateModified","dateGroupModified","chrome","bookmarks","getChildren","children","sort","forEach","sibling","index","id","move","parentId","onCreated","addListener","bookmark","opts","recursive","length","child"],"sourceRoot":""}